pub(crate) mod srv {
    use crate::types::types::{Config, Team};
    use std::io::Error;

    pub fn new_srv() -> impl Init {
        Cmd
    }

    struct Cmd;
    pub trait Init {
        fn exec(&self, f: String) -> Result<(), Error>;
    }

    impl Init for Cmd {
        fn exec(&self, f: String) -> Result<(), Error> {
            println!("Initializing gum config {:?}", f);

            let file = match std::fs::OpenOptions::new()
                .write(true)
                .create_new(true)
                .open(f)
            {
                Ok(file) => file
                // TODO: Should be more informative
                Err(_error) => return Err(_error),
            };

            let new_config = Config {
                teams: Some(vec![Team {
                    name: "default".to_string(),
                    projects: None,
                }]),
                users: None,
            };

            serde_yaml::to_writer(file, &new_config).unwrap();
            Ok(())
        }
    }

    #[cfg(test)]
    mod tests {
        use super::{new_srv, Init};

        #[test]
        fn it_works() {
            let tempfile = match tempfile::tempfile() {
                Ok(f) => {
                    assert!(new_srv().exec(f.path()).is_ok());
                }
                Err(_err) => {
                    assert_eq!(true, false);
                }
            };
        }
    }
}
